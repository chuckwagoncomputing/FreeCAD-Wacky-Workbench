import unittest
import sys
import Test
import FreeCAD
import Part
import PartDesign
import PartDesignGui
import Sketcher
import StraightCut
import Asm4_libs as Asm4
import newAssemblyCmd
import newDatumCmd
import insertLinkCmd
import placeLinkCmd

status = 0

def setUpParts():
	doc = App.newDocument()
	b1 = doc.addObject('PartDesign::Body','Body')
	b1.Label = 'Body'
	doc.recompute()
	s1 = b1.newObject('Sketcher::SketchObject','Sketch')
	s1.Support = (doc.getObject('XY_Plane'),[''])
	s1.MapMode = 'FlatFace'
	doc.recompute()
	geoList = []
	geoList.append(Part.LineSegment(App.Vector(0.000000,0.000000,0),App.Vector(110.933342,0.000000,0)))
	geoList.append(Part.LineSegment(App.Vector(110.933342,0.000000,0),App.Vector(110.933342,88.985420,0)))
	geoList.append(Part.LineSegment(App.Vector(110.933342,88.985420,0),App.Vector(0.000000,88.985420,0)))
	geoList.append(Part.LineSegment(App.Vector(0.000000,88.985420,0),App.Vector(0.000000,0.000000,0)))
	s1.addGeometry(geoList,False)
	conList = []
	conList.append(Sketcher.Constraint('Coincident',0,2,1,1))
	conList.append(Sketcher.Constraint('Coincident',1,2,2,1))
	conList.append(Sketcher.Constraint('Coincident',2,2,3,1))
	conList.append(Sketcher.Constraint('Coincident',3,2,0,1))
	conList.append(Sketcher.Constraint('Horizontal',0))
	conList.append(Sketcher.Constraint('Horizontal',2))
	conList.append(Sketcher.Constraint('Vertical',1))
	conList.append(Sketcher.Constraint('Vertical',3))
	s1.addConstraint(conList)
	del geoList, conList
	s1.addConstraint(Sketcher.Constraint('Coincident',0,1,-1,1))
	doc.recompute()
	doc.recompute()
	p1 = b1.newObject('PartDesign::Pad','Pad')
	p1.Profile = s1
	p1.Length = 10
	doc.recompute()
	p1.ReferenceAxis = (s1,['N_Axis'])
	s1.Visibility = False
	doc.recompute()
	p1.Length = 10.000000
	p1.TaperAngle = 0.000000
	p1.UseCustomVector = 0
	p1.Direction = (0, 0, 1)
	p1.ReferenceAxis = (s1, ['N_Axis'])
	p1.AlongSketchNormal = 1
	p1.Type = 0
	p1.UpToFace = None
	p1.Reversed = 0
	p1.Midplane = 0
	p1.Offset = 0
	doc.recompute()
	s1.Visibility = False
	b2 = doc.addObject('PartDesign::Body','Body001')
	b2.Label = 'Body'
	doc.recompute()
	s2 = b2.newObject('Sketcher::SketchObject','Sketch001')
	s2.Support = (doc.getObject('XY_Plane001'),[''])
	s2.MapMode = 'FlatFace'
	doc.recompute()
	s2.addGeometry(Part.Circle(App.Vector(0.000000,0.000000,0),App.Vector(0,0,1),17.323547),False)
	s2.addConstraint(Sketcher.Constraint('Coincident',0,3,-1,1))
	doc.recompute()
	doc.recompute()
	p2 = b2.newObject('PartDesign::Pad','Pad001')
	p2.Profile = s2
	p2.Length = 10
	doc.recompute()
	p2.ReferenceAxis = (s2,['N_Axis'])
	s2.Visibility = False
	doc.recompute()
	p2.Length = 60.000000
	p2.TaperAngle = 0.000000
	p2.UseCustomVector = 0
	p2.Direction = (0, 0, 1)
	p2.ReferenceAxis = (s2, ['N_Axis'])
	p2.AlongSketchNormal = 1
	p2.Type = 0
	p2.UpToFace = None
	p2.Reversed = 0
	p2.Midplane = 0
	p2.Offset = 0
	doc.recompute()
	s2.Visibility = False
	return doc, b1, b2

class TestStraightCut(unittest.TestCase):
	def tearDown(self):
		global status
		if hasattr(self._outcome, 'errors'):
				result = self.defaultTestResult()
				self._feedErrorsToResult(result, self._outcome.errors)
		else:
				result = self._outcome.result
		ok = all(test != self for test, text in result.errors + result.failures)
		if ok:
				print('\nOK: %s' % (self.id(),))
		else:
				status = 1
		for typ, errors in (('ERROR', result.errors), ('FAIL', result.failures)):
				for test, text in errors:
						if test is self:
								msg = [x for x in text.split('\n')[1:]
										if not x.startswith(' ')][0]
								App.Console.PrintMessage("\n\n%s: %s\n     %s" % (typ, self.id(), msg))

	def test_positioned_tool(self):
		doc, b1, b2 = setUpParts()
		b2.Placement = App.Placement(App.Vector(35,50,-20),App.Rotation(App.Vector(15,30,1),45))
		doc.recompute()
		Gui.Selection.addSelection('Unnamed','Body')
		Gui.ActiveDocument.ActiveView.setActiveObject('pdbody',b1)
		Gui.activateWorkbench("WackyWorkbench")
		Gui.Selection.addSelection('Unnamed','Body001')
		Gui.runCommand('StraightCut',0)
		v = b1.Shape.Volume
		App.closeDocument(doc.Name)
		self.assertEqual(v, 81923.91622644056)

	def test_positioned_part(self):
		doc, b1, b2 = setUpParts()
		b1.Placement = App.Placement(App.Vector(-35,-50,25),App.Rotation(App.Vector(15,30,1),45))
		doc.recompute()
		Gui.Selection.addSelection('Unnamed','Body')
		Gui.ActiveDocument.ActiveView.setActiveObject('pdbody',b1)
		Gui.activateWorkbench("WackyWorkbench")
		Gui.Selection.addSelection('Unnamed','Body001')
		Gui.runCommand('StraightCut',0)
		v = b1.Shape.Volume
		App.closeDocument(doc.Name)
		self.assertEqual(v, 82077.27162062445)

	def test_positioned_both(self):
		doc, b1, b2 = setUpParts()
		b1.Placement = App.Placement(App.Vector(10,10,0),App.Rotation(App.Vector(0,0,1),0))
		b2.Placement = App.Placement(App.Vector(35,50,-20),App.Rotation(App.Vector(15,30,1),45))
		doc.recompute()
		Gui.Selection.addSelection('Unnamed','Body')
		Gui.ActiveDocument.ActiveView.setActiveObject('pdbody',b1)
		Gui.activateWorkbench("WackyWorkbench")
		Gui.Selection.addSelection('Unnamed','Body001')
		Gui.runCommand('StraightCut',0)
		v = b1.Shape.Volume
		App.closeDocument(doc.Name)
		self.assertEqual(v, 81923.91622644138)

	def test_assembly_tool(self):
		doc, b1, b2 = setUpParts()
		Gui.activateWorkbench("Assembly4Workbench")
		Gui.runCommand('Asm4_newAssembly',0)
		Gui.Selection.clearSelection()
		Gui.Selection.addSelection('Unnamed','Body')

		c1 = doc.addObject('PartDesign::CoordinateSystem', 'LCS1')
		b1.addObject(c1)
		c1.AttachmentOffset = App.Placement()
		c1.MapReversed = False
		c1.Support = [(doc.getObject('X_Axis'),'')]
		c1.MapPathParameter = 0.000000
		c1.MapMode = 'ObjectXY'
		c1.recompute()
		c2 = doc.addObject('PartDesign::CoordinateSystem', 'LCS2')
		b1.addObject(c2)
		c2.AttachmentOffset = App.Placement(App.Vector(50, 30, -25),  App.Rotation(0, 20, 30))
		c2.MapReversed = False
		c2.Support = [(doc.getObject('X_Axis'),'')]
		c2.MapPathParameter = 0.000000
		c2.MapMode = 'ObjectXY'
		c2.recompute()

		c3 = doc.addObject('PartDesign::CoordinateSystem', 'LCS3')
		b2.addObject(c3)
		c3.AttachmentOffset = App.Placement()
		c3.MapReversed = False
		c3.Support = [(doc.getObject('X_Axis001'),'')]
		c3.MapPathParameter = 0.000000
		c3.MapMode = 'ObjectXY'
		c3.recompute()

		doc.recompute(None,True,True)

		a = Asm4.getAssembly()
		l1 = a.newObject('App::Link', 'Part')
		l1.LinkedObject = b1
		Asm4.makeAsmProperties(l1)
		l1.AttachedBy = '#LCS1'
		l1.AttachedTo = 'Parent Assembly#LCS_Origin'
		l1.SolverId = 'Asm4EE'
		expr = Asm4.makeExpressionPart( "Parent Assembly", None, "LCS_Origin", "Unnamed", "LCS1" )
		l1.setExpression('Placement', expr)

		l2 = a.newObject('App::Link', 'Tool')
		l2.LinkedObject = b2
		Asm4.makeAsmProperties(l2)
		l2.AttachedBy = '#LCS3'
		l2.AttachedTo = 'Part#LCS2'
		l2.SolverId = 'Asm4EE'
		expr = Asm4.makeExpressionPart( "Part", "Unnamed", "LCS2", "Unnamed", "LCS3" )
		l2.setExpression('Placement', expr)

		b1.Visibility = False
		b2.Visibility = False

		Gui.Selection.clearSelection()
		Gui.Selection.addSelection('Unnamed','Assembly','Part.')
		Gui.Selection.addSelection('Unnamed','Assembly','Tool.')
		Gui.activateWorkbench("WackyWorkbench")
		Gui.runCommand('StraightCut',0)
		v = b1.Shape.Volume
		App.closeDocument(doc.Name)
		self.assertEqual(v, 87457.9652414781)

	def test_assembly_part(self):
		doc, b1, b2 = setUpParts()
		Gui.activateWorkbench("Assembly4Workbench")
		Gui.runCommand('Asm4_newAssembly',0)
		Gui.Selection.clearSelection()
		Gui.Selection.addSelection('Unnamed','Body')

		c1 = doc.addObject('PartDesign::CoordinateSystem', 'LCS1')
		b1.addObject(c1)
		c1.AttachmentOffset = App.Placement()
		c1.MapReversed = False
		c1.Support = [(doc.getObject('X_Axis'),'')]
		c1.MapPathParameter = 0.000000
		c1.MapMode = 'ObjectXY'
		c1.recompute()
		c2 = doc.addObject('PartDesign::CoordinateSystem', 'LCS2')
		b1.addObject(c2)
		c2.AttachmentOffset = App.Placement(App.Vector(50, 30, -25),  App.Rotation(0, 20, 30))
		c2.MapReversed = False
		c2.Support = [(doc.getObject('X_Axis'),'')]
		c2.MapPathParameter = 0.000000
		c2.MapMode = 'ObjectXY'
		c2.recompute()

		c3 = doc.addObject('PartDesign::CoordinateSystem', 'LCS3')
		b2.addObject(c3)
		c3.AttachmentOffset = App.Placement()
		c3.MapReversed = False
		c3.Support = [(doc.getObject('X_Axis001'),'')]
		c3.MapPathParameter = 0.000000
		c3.MapMode = 'ObjectXY'
		c3.recompute()

		doc.recompute(None,True,True)

		a = Asm4.getAssembly()
		l1 = a.newObject('App::Link', 'Tool')
		l1.LinkedObject = b2
		Asm4.makeAsmProperties(l1)
		l1.AttachedBy = '#LCS3'
		l1.AttachedTo = 'Parent Assembly#LCS_Origin'
		l1.SolverId = 'Asm4EE'
		expr = Asm4.makeExpressionPart( "Parent Assembly", None, "LCS_Origin", "Unnamed", "LCS3" )
		l1.setExpression('Placement', expr)

		l2 = a.newObject('App::Link', 'Part')
		l2.LinkedObject = b1
		Asm4.makeAsmProperties(l2)
		l2.AttachedBy = '#LCS2'
		l2.AttachedTo = 'Tool#LCS3'
		l2.SolverId = 'Asm4EE'
		expr = Asm4.makeExpressionPart( "Tool", "Unnamed", "LCS3", "Unnamed", "LCS2" )
		l2.setExpression('Placement', expr)

		b1.Visibility = False
		b2.Visibility = False

		Gui.Selection.clearSelection()
		Gui.Selection.addSelection('Unnamed','Assembly','Part.')
		Gui.Selection.addSelection('Unnamed','Assembly','Tool.')
		Gui.activateWorkbench("WackyWorkbench")
		Gui.runCommand('StraightCut',0)
		v = b1.Shape.Volume
		App.closeDocument(doc.Name)
		self.assertEqual(v, 87457.96524147251)

Test.runTestsFromClass(TestStraightCut)
exit(status)
